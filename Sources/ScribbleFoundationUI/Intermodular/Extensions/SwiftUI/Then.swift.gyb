//
//  Then.swift.gyb
//  ScribbleFoundationUI
//
//  Copyright (c) 2024 ScribbleLabApp LLC. All rights reserved
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//  3. Neither the name of the copyright holder nor the names of its
//     contributors may be used to endorse or promote products derived from
//     this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
%{
  from gyb_utils import *
  filename="Then"
}%
${autogenerated_warning(filename)}

import Foundation

#if !os(Linux)
import CoreGraphics
#endif
#if os(iOS) || os(tvOS)
import UIKit.UIGeometry
#endif

/// A protocol that provides methods to streamline functional programming patterns.
///
/// The `Then` protocol introduces utility methods that facilitate a more fluent API
/// for initializing and configuring objects. It allows for setting properties and
/// performing operations with closures in a clean and readable manner.
///
///     let frame = CGRect().with {
///         $0.origin.x = 10
///         $0.size.width = 100
///     }
///
///     UserDefaults.standard.do {
///         $0.set("devxoul", forKey: "username")
///         $0.set("devxoul@gmail.com", forKey: "email")
///         $0.synchronize()
///     }
///
/// This protocol is designed to work with value types (e.g., `CGRect`, `CGSize`) and
/// reference types (e.g., `UILabel`, `UserDefaults`).
@available(iOS 18.0, macOS 15.0, *)
public protocol Then {}

@available(iOS 18.0, macOS 15.0, *)
extension Then where Self: Any {
    
    /// Allows setting properties with closures immediately after initialization,
    /// and supports copying of value types.
    ///
    /// This method creates a copy of the object, applies the modifications
    /// within the closure, and returns the modified copy.
    ///
    /// - Parameter block: A closure that takes an `inout` parameter of the object
    ///   type and performs modifications.
    /// - Returns: A new instance of the object with the applied modifications.
    ///
    ///     let frame = CGRect().with {
    ///         $0.origin.x = 10
    ///         $0.size.width = 100
    ///     }
    @inlinable
    public func with(_ block: (inout Self) throws -> Void) rethrows -> Self {
        var copy = self
        try block(&copy)
        return copy
    }
    
    /// Executes a closure with the object instance.
    ///
    /// This method is useful for performing multiple operations on the object
    /// within a single closure.
    ///
    /// - Parameter block: A closure that takes the object instance as a parameter
    ///   and performs operations.
    ///
    ///     UserDefaults.standard.do {
    ///         $0.set("devxoul", forKey: "username")
    ///         $0.set("devxoul@gmail.com", forKey: "email")
    ///         $0.synchronize()
    ///     }
    @inlinable
    public func `do`(_ block: (Self) throws -> Void) rethrows {
        try block(self)
    }
}

@available(iOS 18.0, macOS 15.0, *)
extension Then where Self: AnyObject {
    
    /// Allows setting properties with closures immediately after initialization for reference types.
    ///
    /// This method applies modifications directly to the instance and returns the same instance.
    ///
    /// - Parameter block: A closure that takes the object instance as a parameter
    ///   and performs modifications.
    /// - Returns: The same instance with the applied modifications.
    ///
    ///     let label = UILabel().then {
    ///         $0.textAlignment = .center
    ///         $0.textColor = UIColor.black
    ///         $0.text = "Hello, World!"
    ///     }
    @inlinable
    public func then(_ block: (Self) throws -> Void) rethrows -> Self {
        try block(self)
        return self
    }
    
}

#if !os(Linux)
% for type in ["CGPoint", "CGRect", "CGSize", "CGVector"]:
% if type == "CGPoint":
// Extend Core Graphics types to conform to `Then`.
%end
@available(iOS 18.0, macOS 15.0, *)
extension ${type}: Then {}

% end
#endif

% for type in ["NSObject", "Array", "Dictionary", "Set", "JSONDecoder", "JSONEncoder"]:
% if type == "NSObject":
// Extend `NSObject` to conform to `Then`.
% end
% if type == "Array":
// Extend standard library collections and JSON encoders to conform to `Then`.
% end
@available(iOS 18.0, macOS 15.0, *)
extension ${type}: Then {}

% end

#if os(iOS) || os(tvOS) && canImport(UIKit)
% for type in ["UIEdgeInsets", "UIOffset", "UIRectEdge"]:
% if type == "UIEdgeInsets":
// Extend UIKit types to conform to `Then`.
% end
@available(iOS 18.0, macOS 15.0, *)
extension ${type}: Then {}

% end
#endif
